import { ObjectId } from "mongodb";
import { ChatCompletionRequestMessage } from "openai";
import * as dotenv from "dotenv";
import { env } from "process";
dotenv.config();

export type Role = "user" | "assistant" | "system";
export type UserRole = "user" | "assistant";

// Represents a single message document stored in the MongoDB collection
export interface MessageDocument {
  _id?: ObjectId; // Automatically generated by MongoDB
  chatId: number;
  messageId: number;
  userId: number;
  role: UserRole;
  username: string | undefined;
  firstName: string | undefined;
  content: string;
  timestamp: Date;
}

// Represents a single message object. This is the object that is passed around
export class MessageData {
  constructor(
    public chatId: number,
    public messageId: number,
    public userId: number,
    public role: UserRole,
    public username: string | undefined,
    public firstName: string | undefined,
    public content: string,
    public timestamp: Date
  ) {}

  static SYSTEM_PROMPT: ChatCompletionRequestMessage = {
    role: "system",
    content: process.env.GPT_SYSTEM_PROMPT!,
  };

  static fromDocument(document: MessageDocument): MessageData {
    return new MessageData(
      document.chatId,
      document.messageId,
      document.userId,
      document.role,
      document.username,
      document.firstName,
      document.content,
      document.timestamp
    );
  }

  toDocument(): MessageDocument {
    return {
      chatId: this.chatId,
      messageId: this.messageId,
      userId: this.userId,
      role: this.role,
      username: this.username,
      firstName: this.firstName,
      content: this.content,
      timestamp: this.timestamp,
    };
  }

  toOpenAIRequestMessage(): ChatCompletionRequestMessage {
    const name =
      this.role == "assistant"
        ? ""
        : this.username
        ? `@${this.username}: `
        : this.firstName
        ? `${this.firstName}: `
        : "";
    return {
      role: this.role,
      content: name + this.content,
    };
  }
}

export interface UserDocument {
  _id?: ObjectId; // Automatically generated by MongoDB
  userId: number; // Telegram user ID
  location?: {
    latitude: number;
    longitude: number;
  };
  temporaryData?: {
    [key: string]: any;
  };
}
